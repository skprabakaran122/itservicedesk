services:
  database:
    image: postgres:16-alpine
    container_name: itservice_db_prod
    environment:
      POSTGRES_USER: ${DB_USER:-postgres}
      POSTGRES_PASSWORD: ${DB_PASSWORD:-password}
      POSTGRES_DB: ${DB_NAME:-itservicedesk}
      PGDATA: /var/lib/postgresql/data/pgdata
    volumes:
      - postgres_data_prod:/var/lib/postgresql/data
      - ./backups:/backups
    ports:
      - "${DB_PORT:-5432}:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER:-postgres} -d ${DB_NAME:-itservicedesk}"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    restart: always

  app:
    build: 
      context: .
      dockerfile: Dockerfile
    container_name: itservice_app_prod
    ports:
      - "${APP_PORT:-5000}:5000"
    environment:
      - NODE_ENV=production
      - PORT=5000
      - HOST=0.0.0.0
      - DOCKER_ENV=true
      - DATABASE_URL=postgresql://${DB_USER:-postgres}:${DB_PASSWORD:-password}@database:5432/${DB_NAME:-itservicedesk}?sslmode=disable
      - UPLOAD_DIR=/app/uploads
    volumes:
      - ./uploads:/app/uploads:rw
      - ./logs:/app/logs:rw
    depends_on:
      database:
        condition: service_healthy
    restart: always
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  nginx:
    image: nginx:alpine
    container_name: itservice_nginx_prod
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/nginx/ssl:ro
    depends_on:
      - app
    restart: always

volumes:
  postgres_data_prod: