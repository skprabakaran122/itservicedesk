# Docker Compose for RDS Production Deployment
# No local database service - connects to AWS RDS

services:
  app:
    build: 
      context: .
      dockerfile: Dockerfile
    container_name: itservice_app_rds
    ports:
      - "${APP_PORT:-5000}:5000"
    environment:
      - NODE_ENV=production
      - PORT=5000
      - HOST=0.0.0.0
      - DOCKER_ENV=true
      
      # RDS Connection Configuration
      - DATABASE_URL=${DATABASE_URL}
      - DB_HOST=${DB_HOST}
      - DB_NAME=${DB_NAME}
      - DB_USER=${DB_USER}
      - DB_PASSWORD=${DB_PASSWORD}
      - DB_PORT=${DB_PORT:-5432}
      - DB_SSL_MODE=require
      
      # Application Configuration
      - UPLOAD_DIR=/app/uploads
      - SESSION_SECRET=${SESSION_SECRET}
      
      # Email Configuration
      - SENDGRID_API_KEY=${SENDGRID_API_KEY}
      - EMAIL_FROM=${EMAIL_FROM}
      
    volumes:
      - ./uploads:/app/uploads:rw
      - ./logs:/app/logs:rw
    restart: always
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    # Network configuration for AWS deployment
    networks:
      - app-network

  nginx:
    image: nginx:alpine
    container_name: itservice_nginx_rds
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/nginx/ssl:ro
    depends_on:
      - app
    restart: always
    networks:
      - app-network

networks:
  app-network:
    driver: bridge

# No volumes needed for database - RDS is external